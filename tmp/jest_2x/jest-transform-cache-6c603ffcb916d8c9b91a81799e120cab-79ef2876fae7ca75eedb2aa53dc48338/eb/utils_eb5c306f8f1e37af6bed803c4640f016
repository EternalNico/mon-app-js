f69473b0612a06dba35914519ab387fe
/* istanbul ignore next */
function cov_ou74n9vs0() {
  var path = "/var/lib/jenkins/workspace/my-app-test_develop/mon-app-js/src/utils.js";
  var hash = "d3837fabe27db88f9c83b3bd824968705f9bbbd3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/var/lib/jenkins/workspace/my-app-test_develop/mon-app-js/src/utils.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 17
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 17
        }
      },
      "2": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "3": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 17
        }
      },
      "4": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "5": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 32,
          column: 1
        }
      },
      "6": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 31,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "addNumbers",
        decl: {
          start: {
            line: 2,
            column: 9
          },
          end: {
            line: 2,
            column: 19
          }
        },
        loc: {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "subtractNumbers",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 24
          }
        },
        loc: {
          start: {
            line: 6,
            column: 31
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 6
      },
      "2": {
        name: "multiplyNumbers",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 24
          }
        },
        loc: {
          start: {
            line: 10,
            column: 31
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 10
      },
      "3": {
        name: "divideNumbers",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 22
          }
        },
        loc: {
          start: {
            line: 14,
            column: 29
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 14
      },
      "4": {
        name: "isValidNumber",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 22
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 24
          }
        }, {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 20,
            column: 43
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 0
          },
          end: {
            line: 32,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 0
          },
          end: {
            line: 32,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 33
          }
        }, {
          start: {
            line: 24,
            column: 37
          },
          end: {
            line: 24,
            column: 51
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d3837fabe27db88f9c83b3bd824968705f9bbbd3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ou74n9vs0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ou74n9vs0();
// Fonctions utilitaires pour les calculs
function addNumbers(a, b) {
  /* istanbul ignore next */
  cov_ou74n9vs0().f[0]++;
  cov_ou74n9vs0().s[0]++;
  return a + b;
}
function subtractNumbers(a, b) {
  /* istanbul ignore next */
  cov_ou74n9vs0().f[1]++;
  cov_ou74n9vs0().s[1]++;
  return a - b;
}
function multiplyNumbers(a, b) {
  /* istanbul ignore next */
  cov_ou74n9vs0().f[2]++;
  cov_ou74n9vs0().s[2]++;
  return a * b;
}
function divideNumbers(a, b) {
  /* istanbul ignore next */
  cov_ou74n9vs0().f[3]++;
  cov_ou74n9vs0().s[3]++;
  return a / b;
}

// Fonction de validation
function isValidNumber(value) {
  /* istanbul ignore next */
  cov_ou74n9vs0().f[4]++;
  cov_ou74n9vs0().s[4]++;
  return /* istanbul ignore next */(cov_ou74n9vs0().b[0][0]++, !isNaN(value)) &&
  /* istanbul ignore next */
  (cov_ou74n9vs0().b[0][1]++, isFinite(value));
}

// Export pour les tests (si environnement Node.js)
/* istanbul ignore next */
cov_ou74n9vs0().s[5]++;
if (
/* istanbul ignore next */
(cov_ou74n9vs0().b[2][0]++, typeof module !== 'undefined') &&
/* istanbul ignore next */
(cov_ou74n9vs0().b[2][1]++, module.exports)) {
  /* istanbul ignore next */
  cov_ou74n9vs0().b[1][0]++;
  cov_ou74n9vs0().s[6]++;
  module.exports = {
    addNumbers,
    subtractNumbers,
    multiplyNumbers,
    divideNumbers,
    isValidNumber
  };
} else
/* istanbul ignore next */
{
  cov_ou74n9vs0().b[1][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfb3U3NG45dnMwIiwiYWN0dWFsQ292ZXJhZ2UiLCJhZGROdW1iZXJzIiwiYSIsImIiLCJmIiwicyIsInN1YnRyYWN0TnVtYmVycyIsIm11bHRpcGx5TnVtYmVycyIsImRpdmlkZU51bWJlcnMiLCJpc1ZhbGlkTnVtYmVyIiwidmFsdWUiLCJpc05hTiIsImlzRmluaXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZvbmN0aW9ucyB1dGlsaXRhaXJlcyBwb3VyIGxlcyBjYWxjdWxzXG5mdW5jdGlvbiBhZGROdW1iZXJzKGEsIGIpIHtcbiAgICByZXR1cm4gYSArIGI7XG59XG5cbmZ1bmN0aW9uIHN1YnRyYWN0TnVtYmVycyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBseU51bWJlcnMoYSwgYikge1xuICAgIHJldHVybiBhICogYjtcbn1cblxuZnVuY3Rpb24gZGl2aWRlTnVtYmVycyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgLyBiO1xufVxuXG4vLyBGb25jdGlvbiBkZSB2YWxpZGF0aW9uXG5mdW5jdGlvbiBpc1ZhbGlkTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05hTih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpO1xufVxuXG4vLyBFeHBvcnQgcG91ciBsZXMgdGVzdHMgKHNpIGVudmlyb25uZW1lbnQgTm9kZS5qcylcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBhZGROdW1iZXJzLFxuICAgICAgICBzdWJ0cmFjdE51bWJlcnMsXG4gICAgICAgIG11bHRpcGx5TnVtYmVycyxcbiAgICAgICAgZGl2aWRlTnVtYmVycyxcbiAgICAgICAgaXNWYWxpZE51bWJlclxuICAgIH07XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlWTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBZlo7QUFDQSxTQUFTRSxVQUFVQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUFBO0VBQUFKLGFBQUEsR0FBQUssQ0FBQTtFQUFBTCxhQUFBLEdBQUFNLENBQUE7RUFDdEIsT0FBT0gsQ0FBQyxHQUFHQyxDQUFDO0FBQ2hCO0FBRUEsU0FBU0csZUFBZUEsQ0FBQ0osQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFBQTtFQUFBSixhQUFBLEdBQUFLLENBQUE7RUFBQUwsYUFBQSxHQUFBTSxDQUFBO0VBQzNCLE9BQU9ILENBQUMsR0FBR0MsQ0FBQztBQUNoQjtBQUVBLFNBQVNJLGVBQWVBLENBQUNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQUE7RUFBQUosYUFBQSxHQUFBSyxDQUFBO0VBQUFMLGFBQUEsR0FBQU0sQ0FBQTtFQUMzQixPQUFPSCxDQUFDLEdBQUdDLENBQUM7QUFDaEI7QUFFQSxTQUFTSyxhQUFhQSxDQUFDTixDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUFBO0VBQUFKLGFBQUEsR0FBQUssQ0FBQTtFQUFBTCxhQUFBLEdBQUFNLENBQUE7RUFDekIsT0FBT0gsQ0FBQyxHQUFHQyxDQUFDO0FBQ2hCOztBQUVBO0FBQ0EsU0FBU00sYUFBYUEsQ0FBQ0MsS0FBSyxFQUFFO0VBQUE7RUFBQVgsYUFBQSxHQUFBSyxDQUFBO0VBQUFMLGFBQUEsR0FBQU0sQ0FBQTtFQUMxQixPQUFPLDJCQUFBTixhQUFBLEdBQUFJLENBQUEsV0FBQ1EsS0FBSyxDQUFDRCxLQUFLLENBQUM7RUFBQTtFQUFBLENBQUFYLGFBQUEsR0FBQUksQ0FBQSxVQUFJUyxRQUFRLENBQUNGLEtBQUssQ0FBQztBQUMzQzs7QUFFQTtBQUFBO0FBQUFYLGFBQUEsR0FBQU0sQ0FBQTtBQUNBO0FBQUk7QUFBQSxDQUFBTixhQUFBLEdBQUFJLENBQUEsaUJBQU9VLE1BQU0sS0FBSyxXQUFXO0FBQUE7QUFBQSxDQUFBZCxhQUFBLEdBQUFJLENBQUEsVUFBSVUsTUFBTSxDQUFDQyxPQUFPLEdBQUU7RUFBQTtFQUFBZixhQUFBLEdBQUFJLENBQUE7RUFBQUosYUFBQSxHQUFBTSxDQUFBO0VBQ2pEUSxNQUFNLENBQUNDLE9BQU8sR0FBRztJQUNiYixVQUFVO0lBQ1ZLLGVBQWU7SUFDZkMsZUFBZTtJQUNmQyxhQUFhO0lBQ2JDO0VBQ0osQ0FBQztBQUNMLENBQUM7QUFBQTtBQUFBO0VBQUFWLGFBQUEsR0FBQUksQ0FBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119